name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  DATABASE_URL: "file:./test.db"
  NEXTAUTH_SECRET: "test-secret"
  NEXTAUTH_URL: "http://localhost:3000"
  JWT_SECRET: "test-jwt-secret"
  ANTHROPIC_API_KEY: "test-anthropic-key"
  VERCEL_TOKEN: "test-vercel-token"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Run database migrations
        run: npm run db:push
        
      - name: Run integration tests
        run: npm run test:integration

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npm run e2e:install
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npm run e2e
        
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npm run e2e:install
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Build application
        run: npm run build
        
      - name: Run visual regression tests
        run: npm run test:visual
        
      - name: Upload visual diff reports
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-diff-report
          path: test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npm run e2e:install
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Build application
        run: npm run build
        
      - name: Run performance tests
        run: npm run test:performance
        
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: test-results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, integration-tests, e2e-tests, visual-regression-tests, performance-tests, security-scan]
    if: always()
    
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          
      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ${{ needs.visual-regression-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 🧪 Test Results\n\n';
            comment += '| Test Type | Status |\n';
            comment += '|-----------|--------|\n';
            comment += `| Lint & Type Check | ${{ needs.lint-and-type-check.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| Visual Regression | ${{ needs.visual-regression-tests.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅' || '❌' }} |\n`;
            comment += `| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |\n`;
            
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              comment += '\n### 📊 Coverage Report\n\n';
              comment += `- **Lines**: ${total.lines.pct}%\n`;
              comment += `- **Functions**: ${total.functions.pct}%\n`;
              comment += `- **Branches**: ${total.branches.pct}%\n`;
              comment += `- **Statements**: ${total.statements.pct}%\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });