name: 🤖 Auto Deploy Monitor & Fix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  monitor-deploy:
    name: Monitor Vercel Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install
          else
            npm ci
          fi

      - name: 🔍 Run preventive code analysis
        id: analysis
        run: |
          echo "🔍 Running preventive code analysis..."
          
          # Run our custom analysis script
          if npm run analyze 2>&1 | tee analysis.log; then
            echo "✅ Code analysis passed"
          else
            echo "⚠️ Code analysis found issues, attempting auto-fix..."
            echo "analysis_warning=true" >> $GITHUB_OUTPUT
            
            # Try auto-fix
            if npm run analyze:fix 2>&1 | tee analysis-fix.log; then
              echo "🔧 Auto-fixes applied successfully"
              echo "analysis_fixed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Auto-fix failed"
              echo "analysis_error=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 🧪 Run pre-deploy checks
        id: pre-checks
        run: |
          echo "Running pre-deployment checks..."
          
          # Type check
          if npm run type-check 2>&1 | tee type-check.log; then
            echo "✅ TypeScript check passed"
          else
            echo "❌ TypeScript check failed"
            echo "typescript_error=true" >> $GITHUB_OUTPUT
          fi
          
          # Lint check (allow warnings, fail on errors)
          if npm run lint -- --max-warnings 20 2>&1 | tee lint.log; then
            echo "✅ ESLint check passed"
          else
            echo "❌ ESLint check failed"
            echo "lint_error=true" >> $GITHUB_OUTPUT
          fi
          
          # Build check
          if npm run build 2>&1 | tee build.log; then
            echo "✅ Build check passed"
          else
            echo "❌ Build check failed"
            echo "build_error=true" >> $GITHUB_OUTPUT
          fi

      - name: 💾 Commit preventive analysis fixes
        if: steps.analysis.outputs.analysis_fixed == 'true'
        run: |
          echo "💾 Committing preventive analysis fixes..."
          git config --local user.email "action@github.com"
          git config --local user.name "NEX7 Auto-Analysis Bot"
          git add .
          git commit -m "🤖 Auto-fix: Preventive code analysis fixes

🔍 Applied fixes from preventive analysis:
- Unused variable prefixes
- Type safety improvements  
- React hooks optimization
- ESLint compliance

🚀 Generated by NEX7 Analysis System
⚡ Commit: ${{ github.sha }}"
          git push

      - name: 🤖 Claude AI Auto-fix deployment issues
        if: steps.pre-checks.outputs.typescript_error == 'true' || steps.pre-checks.outputs.lint_error == 'true' || steps.pre-checks.outputs.build_error == 'true'
        id: claude-fix
        run: |
          echo "🔧 Attempting Claude AI-powered auto-fix..."
          
          # Prepare error context for Claude
          ERROR_CONTEXT=$(cat <<EOF
          {
            "source": "github-actions",
            "projectName": "${{ github.repository }}",
            "runId": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref }}",
            "error": "Build/Type/Lint errors detected",
            "logs": []
          }
          EOF
          )
          
          # Collect error logs
          if [ -f "type-check.log" ]; then
            TYPE_LOGS=$(tail -n 100 type-check.log | jq -Rs .)
            ERROR_CONTEXT=$(echo "$ERROR_CONTEXT" | jq ".logs += [\"TypeScript Errors:\", $TYPE_LOGS]")
          fi
          
          if [ -f "lint.log" ]; then
            LINT_LOGS=$(tail -n 100 lint.log | jq -Rs .)
            ERROR_CONTEXT=$(echo "$ERROR_CONTEXT" | jq ".logs += [\"ESLint Errors:\", $LINT_LOGS]")
          fi
          
          if [ -f "build.log" ]; then
            BUILD_LOGS=$(tail -n 100 build.log | jq -Rs .)
            ERROR_CONTEXT=$(echo "$ERROR_CONTEXT" | jq ".logs += [\"Build Errors:\", $BUILD_LOGS]")
          fi
          
          # Send to Claude deployment notify endpoint
          if [ -n "${{ secrets.CLAUDE_WEBHOOK_SECRET }}" ]; then
            RESPONSE=$(curl -s -X POST \
              "${{ secrets.APP_URL }}/api/claude/deployment-notify" \
              -H "Content-Type: application/json" \
              -H "x-webhook-signature: sha256=$(echo -n "$ERROR_CONTEXT" | openssl dgst -sha256 -hmac "${{ secrets.CLAUDE_WEBHOOK_SECRET }}" | cut -d' ' -f2)" \
              -d "$ERROR_CONTEXT")
            
            ERROR_ID=$(echo "$RESPONSE" | jq -r '.errorId')
            echo "error_id=$ERROR_ID" >> $GITHUB_OUTPUT
            
            # Wait for Claude to analyze and apply fixes
            echo "⏳ Waiting for Claude AI analysis..."
            sleep 30
            
            # Check if fixes were applied
            FIX_STATUS=$(curl -s "${{ secrets.APP_URL }}/api/claude/execute-fix?errorId=$ERROR_ID")
            
            if [ "$(echo "$FIX_STATUS" | jq -r '.success')" = "true" ]; then
              echo "✅ Claude AI fixes applied successfully"
              echo "claude_fixed=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Claude AI fixes partially applied or failed"
            fi
          else
            echo "⚠️ Claude webhook not configured, falling back to basic auto-fix"
            
            # Fallback to basic auto-fix
            if [ -f "scripts/auto-fix-errors.sh" ]; then
              chmod +x scripts/auto-fix-errors.sh
              ./scripts/auto-fix-errors.sh
            fi
            
            # Try ESLint auto-fix
            npm run lint:fix || echo "ESLint auto-fix completed"
          fi
          
          # Check if any fixes were applied
          if ! git diff --quiet; then
            echo "📝 Changes detected from auto-fix"
            git config --local user.email "claude@anthropic.com"
            git config --local user.name "Claude AI Auto-Fix"
            git add .
            git commit -m "🤖 Auto-fix: Claude AI deployment error resolution

🧠 Applied AI-powered fixes:
- Analyzed error patterns with Claude
- Applied context-aware corrections
- TypeScript type fixes
- Module resolution fixes
- ESLint compliance updates

🚀 Generated by Claude AI via GitHub Actions
⚡ Commit: ${{ github.sha }}
🆔 Error ID: $ERROR_ID"
            git push
            echo "changes_committed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes needed"
          fi

      - name: ⏱️ Wait for Vercel deployment
        id: wait-deploy
        run: |
          echo "🕐 Waiting for Vercel deployment to start..."
          sleep 30
          
          # Get deployment using Vercel API
          node scripts/monitor-vercel-deployment.js
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}

      - name: 🚨 Create issue on deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read error logs
            let errorDetails = '';
            try {
              if (fs.existsSync('type-check.log')) {
                errorDetails += '## TypeScript Errors\n```\n' + fs.readFileSync('type-check.log', 'utf8') + '\n```\n\n';
              }
              if (fs.existsSync('lint.log')) {
                errorDetails += '## ESLint Errors\n```\n' + fs.readFileSync('lint.log', 'utf8') + '\n```\n\n';
              }
              if (fs.existsSync('build.log')) {
                errorDetails += '## Build Errors\n```\n' + fs.readFileSync('build.log', 'utf8') + '\n```\n\n';
              }
              if (fs.existsSync('vercel-deploy.log')) {
                errorDetails += '## Vercel Deployment Errors\n```\n' + fs.readFileSync('vercel-deploy.log', 'utf8') + '\n```\n\n';
              }
            } catch (e) {
              errorDetails = 'Error reading log files: ' + e.message;
            }
            
            const issueBody = `
            # 🚨 Automatic Deployment Failure Alert
            
            **Commit:** ${context.sha}
            **Branch:** ${context.ref}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            
            ## 📊 Deployment Status
            ❌ **Deployment Failed** - Automatic fixes were unable to resolve the issues.
            
            ## 🔍 Error Details
            ${errorDetails}
            
            ## 🛠️ Attempted Fixes
            - ✅ TypeScript error suppression (@ts-ignore)
            - ✅ ESLint auto-fix (--fix)
            - ✅ Import path corrections
            - ✅ Dependency installation
            
            ## 🎯 Next Steps
            1. Review the error logs above
            2. Apply manual fixes for complex issues
            3. Test locally before pushing
            4. Re-run deployment
            
            ## 🤖 Auto-Generated
            This issue was created automatically by GitHub Actions.
            
            **Time:** ${new Date().toISOString()}
            **Workflow File:** \`.github/workflows/auto-deploy-monitor.yml\`
            `;
            
            // Check if issue already exists for this commit
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'auto-deploy-failure',
              per_page: 100
            });
            
            const commitIssue = existingIssues.data.find(issue => 
              issue.body && issue.body.includes(context.sha)
            );
            
            if (!commitIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Deploy Failed: ${context.sha.substring(0, 8)} - Auto-fix unsuccessful`,
                body: issueBody,
                labels: ['auto-deploy-failure', 'bug', 'deployment']
              });
              
              console.log('✅ Created deployment failure issue');
            } else {
              console.log('ℹ️ Issue already exists for this commit');
            }

      - name: 🎉 Close resolved issues
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Close any open deployment failure issues for this commit
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'auto-deploy-failure'
            });
            
            for (const issue of issues.data) {
              if (issue.body && issue.body.includes(context.sha)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ **Deployment Successful!**
                  
The deployment issue has been automatically resolved.

**Commit:** ${context.sha}
**Status:** ✅ Deployed successfully
**Time:** ${new Date().toISOString()}

Closing this issue automatically.`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  labels: [...issue.labels.map(l => l.name), 'resolved']
                });
              }
            }

      - name: 📊 Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment monitoring completed successfully"
          else
            echo "❌ Deployment monitoring failed"
          fi