name: 📊 Deployment Status Dashboard

on:
  deployment_status:
  workflow_run:
    workflows: ["🤖 Auto Deploy Monitor & Fix"]
    types: [completed]

permissions:
  contents: read
  issues: write
  deployments: read

jobs:
  update-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success' || github.event.deployment_status.state == 'failure'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🎉 Handle Successful Deployment
        if: github.event.deployment_status.state == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = context.payload.deployment_status.target_url;
            const environment = context.payload.deployment_status.environment;
            const sha = context.payload.deployment.sha;
            
            console.log(`✅ Deployment successful!`);
            console.log(`🌐 URL: ${deploymentUrl}`);
            console.log(`🏷️ Environment: ${environment}`);
            console.log(`📝 Commit: ${sha}`);
            
            // Close any open deployment failure issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'auto-deploy-failure'
            });
            
            for (const issue of issues.data) {
              if (issue.body && issue.body.includes(sha)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `🎉 **Deployment Successful!**
                  
The deployment has been completed successfully and is now live.

**📊 Deployment Details:**
- **URL:** ${deploymentUrl}
- **Environment:** ${environment}
- **Commit:** ${sha}
- **Status:** ✅ Live and running
- **Time:** ${new Date().toISOString()}

This issue will be closed automatically.

---
*🤖 Automated by GitHub Actions*`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  labels: [...issue.labels.map(l => l.name), 'resolved', 'deployed']
                });
                
                console.log(`✅ Closed issue #${issue.number}`);
              }
            }

      - name: 🚨 Handle Failed Deployment
        if: github.event.deployment_status.state == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = context.payload.deployment_status.target_url;
            const environment = context.payload.deployment_status.environment;
            const sha = context.payload.deployment.sha;
            const description = context.payload.deployment_status.description;
            
            console.log(`❌ Deployment failed!`);
            console.log(`🌐 URL: ${deploymentUrl}`);
            console.log(`🏷️ Environment: ${environment}`);
            console.log(`📝 Commit: ${sha}`);
            console.log(`💬 Description: ${description}`);
            
            // Check if we already have an issue for this commit
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deployment-failure'
            });
            
            const commitIssue = existingIssues.data.find(issue => 
              issue.body && issue.body.includes(sha)
            );
            
            if (!commitIssue) {
              const issueBody = `# 🚨 Deployment Failure Alert
              
**Environment:** ${environment}  
**Commit:** ${sha}  
**Time:** ${new Date().toISOString()}  
**Target URL:** ${deploymentUrl}

## 📋 Failure Details
${description || 'No description provided'}

## 🔍 Troubleshooting Steps
1. Check the deployment logs in Vercel dashboard
2. Review the commit changes for potential issues
3. Run \`npm run build\` locally to test
4. Check for missing environment variables
5. Verify all dependencies are properly installed

## 🎯 Quick Actions
- [ ] Check Vercel deployment logs
- [ ] Test build locally
- [ ] Review environment variables
- [ ] Check for dependency issues
- [ ] Manual deployment test

## 🔗 Links
- **Vercel Dashboard:** ${deploymentUrl}
- **Commit:** https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}

---
*🤖 Auto-generated by GitHub Actions*`;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Deployment Failed: ${sha.substring(0, 8)} - ${environment}`,
                body: issueBody,
                labels: ['deployment-failure', 'bug', 'urgent']
              });
              
              console.log('✅ Created deployment failure issue');
            } else {
              console.log('ℹ️ Issue already exists for this deployment');
            }